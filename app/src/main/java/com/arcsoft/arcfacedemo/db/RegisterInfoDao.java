package com.arcsoft.arcfacedemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.arcsoft.arcfacedemo.db.dao.RegisterInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGISTER_INFO".
*/
public class RegisterInfoDao extends AbstractDao<RegisterInfo, Long> {

    public static final String TABLENAME = "REGISTER_INFO";

    /**
     * Properties of entity RegisterInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FeatureDate = new Property(1, byte[].class, "featureDate", false, "FEATURE_DATE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Age = new Property(3, String.class, "age", false, "AGE");
        public final static Property Sex = new Property(4, String.class, "sex", false, "SEX");
        public final static Property Serial = new Property(5, String.class, "serial", false, "SERIAL");
        public final static Property TrackId = new Property(6, int.class, "trackId", false, "TRACK_ID");
        public final static Property Path = new Property(7, String.class, "path", false, "PATH");
    }


    public RegisterInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RegisterInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGISTER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FEATURE_DATE\" BLOB," + // 1: featureDate
                "\"NAME\" TEXT," + // 2: name
                "\"AGE\" TEXT," + // 3: age
                "\"SEX\" TEXT," + // 4: sex
                "\"SERIAL\" TEXT," + // 5: serial
                "\"TRACK_ID\" INTEGER NOT NULL ," + // 6: trackId
                "\"PATH\" TEXT);"); // 7: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGISTER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegisterInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        byte[] featureDate = entity.getFeatureDate();
        if (featureDate != null) {
            stmt.bindBlob(2, featureDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(4, age);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(6, serial);
        }
        stmt.bindLong(7, entity.getTrackId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegisterInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        byte[] featureDate = entity.getFeatureDate();
        if (featureDate != null) {
            stmt.bindBlob(2, featureDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(4, age);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(6, serial);
        }
        stmt.bindLong(7, entity.getTrackId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RegisterInfo readEntity(Cursor cursor, int offset) {
        RegisterInfo entity = new RegisterInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // featureDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // age
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // serial
            cursor.getInt(offset + 6), // trackId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegisterInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFeatureDate(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSerial(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTrackId(cursor.getInt(offset + 6));
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RegisterInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RegisterInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RegisterInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
